openapi: 3.0.3
info:
  title: Tiny Tasks API
  version: 1.0.0
  description: Minimal task API using only Node.js core modules.
servers:
  - url: http://localhost:3000
tags:
  - name: Health
  - name: Tasks
  - name: Docs

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Returns service status.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl -i http://localhost:3000/health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
              examples:
                ok:
                  value: { status: ok }

  /tasks:
    get:
      tags: [Tasks]
      summary: List tasks
      description: Returns all tasks.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl -i http://localhost:3000/tasks
      responses:
        '200':
          description: Array of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
              examples:
                example:
                  value:
                    - id: 1
                      title: "demo"
                      due: "2025-12-31"
                      completed: false
    post:
      tags: [Tasks]
      summary: Create task
      description: Creates a new task.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl -i -X POST http://localhost:3000/tasks \
              -H "Content-Type: application/json" \
              -d '{"title":"demo","due":"2025-12-31"}'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
            examples:
              create:
                value: { title: "demo", due: "2025-12-31" }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Task ID
        schema:
          type: integer
          format: int64
    get:
      tags: [Tasks]
      summary: Get task by ID
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl -i http://localhost:3000/tasks/1
      responses:
        '200':
          description: Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Tasks]
      summary: Update task
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl -i -X PUT http://localhost:3000/tasks/1 \
              -H "Content-Type: application/json" \
              -d '{"title":"updated","due":"2025-12-31","completed":true}'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
            examples:
              update:
                value: { completed: true }
      responses:
        '200':
          description: Updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Tasks]
      summary: Delete task
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl -i -X DELETE http://localhost:3000/tasks/1
      responses:
        '204':
          description: Deleted (no content)
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Task:
      type: object
      required: [id, title, completed]
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: demo
        due:
          type: string
          description: Date in YYYY-MM-DD format
          example: '2025-12-31'
        completed:
          type: boolean
          example: false
    TaskCreate:
      type: object
      required: [title]
      properties:
        title: { type: string, example: demo }
        due: { type: string, example: '2025-12-31' }
    TaskUpdate:
      type: object
      properties:
        title: { type: string, example: updated }
        due: { type: string, example: '2025-12-31' }
        completed: { type: boolean, example: true }
    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
          example: Not Found
