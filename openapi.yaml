openapi: 3.0.3
info:
  title: Tiny Tasks API
  version: "1.0.0"
  description: Minimal, dependency-free REST API for managing tasks.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Local development server
security: []
tags:
  - name: Health
    description: Health check endpoint
  - name: Tasks
    description: CRUD operations for tasks
  - name: Docs
    description: API documentation endpoints

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      operationId: getHealth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks:
    get:
      tags: [Tasks]
      summary: List tasks
      operationId: listTasks
      responses:
        '200':
          description: Array of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [Tasks]
      summary: Create task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
            examples:
              createExample:
                value:
                  title: demo task
                  due: "2025-12-31"
                  completed: false
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags: [Tasks]
      summary: Get task by ID
      operationId: getTaskById
      responses:
        '200':
          description: Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Tasks]
      summary: Update task
      operationId: updateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Tasks]
      summary: Delete task
      operationId: deleteTask
      responses:
        '204':
          description: No Content
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Task:
      type: object
      required: [id, title, due, completed]
      properties:
        id:
          type: string
          example: "1754922040132"
        title:
          type: string
          example: "demo task"
        due:
          type: string
          format: date
          example: "2025-12-31"
        completed:
          type: boolean
          example: false

    TaskInput:
      type: object
      required: [title, due]
      properties:
        title:
          type: string
        due:
          type: string
          format: date
        completed:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
          example: Bad request
