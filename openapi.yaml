openapi: 3.0.3
info:
  title: Tiny Tasks API
  version: 1.0.0
  description: >
    Minimal task API with strict JSON handling, CORS, and optional persistence (memory/JSON/SQLite).
  license:
    name: MIT
servers:
  - url: /
# No auth required for any operation; satisfies Redocly "security-defined" rule
security: []

tags:
  - name: Tasks
    description: CRUD operations for tasks
  - name: CORS
    description: Preflight OPTIONS endpoints
  - name: Health
    description: Liveness checks

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      operationId: getHealth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Health' }
              example: { status: "ok" }
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/ErrorDefault'

  /tasks:
    get:
      tags: [Tasks]
      summary: List tasks
      operationId: listTasks
      responses:
        '200':
          description: Array of tasks
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Task' }
              example:
                - { id: "tsk_001", title: "buy milk", due: "2025-12-31", completed: false }
                - { id: "tsk_002", title: "send report", due: "2025-11-15", completed: true }
        '400':
          $ref: '#/components/responses/BadRequest'
        '405':
          $ref: '#/components/responses/MethodNotAllowedCollection'
        default:
          $ref: '#/components/responses/ErrorDefault'

    post:
      tags: [Tasks]
      summary: Create task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskCreate' }
            example: { title: "buy milk", due: "2025-12-31", completed: false }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
              example: { id: "tsk_abc123", title: "buy milk", due: "2025-12-31", completed: false }
        '400':
          $ref: '#/components/responses/BadRequest'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '405':
          $ref: '#/components/responses/MethodNotAllowedCollection'
        default:
          $ref: '#/components/responses/ErrorDefault'

    options:
      tags: [CORS]
      summary: CORS preflight (collection)
      operationId: optionsTasks
      responses:
        '200':
          description: OK (CORS headers present on response)
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/ErrorDefault'

  /tasks/{id}:
    parameters:
      - $ref: '#/components/parameters/TaskId'

    get:
      tags: [Tasks]
      summary: Get a task
      operationId: getTask
      responses:
        '200':
          description: Task
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
              example: { id: "tsk_001", title: "buy milk", due: "2025-12-31", completed: false }
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowedItem'
        default:
          $ref: '#/components/responses/ErrorDefault'

    put:
      tags: [Tasks]
      summary: Update a task
      description: Provide any subset of fields; at least one is required.
      operationId: updateTask
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskUpdate' }
            example: { completed: true }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
              example: { id: "tsk_001", title: "buy milk", due: "2025-12-31", completed: true }
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '405':
          $ref: '#/components/responses/MethodNotAllowedItem'
        default:
          $ref: '#/components/responses/ErrorDefault'

    delete:
      tags: [Tasks]
      summary: Delete a task
      operationId: deleteTask
      responses:
        '204': { description: No Content }
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowedItem'
        default:
          $ref: '#/components/responses/ErrorDefault'

    options:
      tags: [CORS]
      summary: CORS preflight (item)
      operationId: optionsTask
      responses:
        '200':
          description: OK (CORS headers present on response)
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/ErrorDefault'

components:
  parameters:
    TaskId:
      name: id
      in: path
      required: true
      schema: { type: string }

  headers:
    Allow:
      description: Comma-separated list of allowed methods for this resource.
      schema:
        type: string
        example: GET, POST

  responses:
    BadRequest:
      description: Validation error or malformed JSON
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          example: { error: "Invalid 'due' (expected YYYY-MM-DD)" }

    UnsupportedMediaType:
      description: Content-Type must be application/json
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          example: { error: "Unsupported Media Type (use application/json)" }

    PayloadTooLarge:
      description: Payload too large (exceeds MAX_BODY_BYTES)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          example: { error: "Payload too large" }

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          example: { error: "Not found" }

    MethodNotAllowedCollection:
      description: Method not allowed on /tasks
      headers:
        Allow:
          $ref: '#/components/headers/Allow'
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          example: { error: "Method not allowed" }

    MethodNotAllowedItem:
      description: Method not allowed on /tasks/{id}
      headers:
        Allow:
          $ref: '#/components/headers/Allow'
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          example: { error: "Method not allowed" }

    ErrorDefault:
      description: Error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          example: { error: "Unexpected error" }

  schemas:
    Health:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
          example: ok
      required: [status]

    Task:
      type: object
      additionalProperties: false
      properties:
        id: { type: string }
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Non-empty; max length default 200 (configurable)
        due:
          type: string
          format: date
          description: YYYY-MM-DD
        completed: { type: boolean }
      required: [id, title, due, completed]

    TaskCreate:
      type: object
      additionalProperties: false
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        due:
          type: string
          format: date
          description: YYYY-MM-DD
        completed:
          type: boolean
          description: Optional, defaults to false
      required: [title, due]

    TaskUpdate:
      type: object
      additionalProperties: false
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        due:
          type: string
          format: date
        completed:
          type: boolean
      description: At least one of title, due, or completed is required.
      anyOf:
        - required: [title]
        - required: [due]
        - required: [completed]

    Error:
      type: object
      additionalProperties: false
      properties:
        error: { type: string }
      required: [error]
